#include<stdio.h>

static int pathRow[]={0, 0, 1, 1, -1, 1, -1, -1};
static int pathCol[]={1, -1, -1, 1, 1, 0, 0, -1};
int k=0;
char dict[4][100]={"jeffer","car"};
char word[]={0};
int visited[3][3]={};
char board[3][3]={{'j','r','e'},{'r','e','f'},{'a','c','f'}};
int ispresent(char word[],char dict[4][100]){
    for(int i=0;i<3;i++){
        for(int j=0;;j++){
            if(word[j]=='\0'&&dict[i][j]=='\0'){
                return 1;
            }
            if(word[j]=='\0'){
                break;
            }
            if(dict[i][j]=='\0'){
                break;
            }
            if(word[j]!=dict[i][j]){
                break;
            }
            else{
                continue;
            }
        }
    }
    return 0;
    
}
int issafe(int newrow,int newcol,int visited[3][3]){
    if((newcol>=0 && newcol<3) && (newrow>=0 && newrow<3)){
        if(visited[newrow][newcol]==0){
            return 1;
        }
        return 0;
    }
    return 0;
}
void add(char word[],char a){
    int i;
    for(i=0;word[i]!='\0';i++);
    word[i++]=a;
    word[i]='\0';
}
void remove1(char word[]){
    int i;
    for(i=0;word[i]!='\0';i++);
    word[i-1]='\0';
}
int len(char word[]){
    int i;
    for(i=0;word[i]!='\0';i++);
    return i;
}
void FindWord(char board[3][3], int visited[3][3], int row, int col, char word[],char dict[4][100] ){
    //printf("%d %s\n",k++,word);
    //word="qui";
    if (ispresent(word,dict))
    {
        printf("\n%s",word);
    }
    if (len(word) == 9)
    {
        return;
    }
    for (int i = 0; i < 8; i++)
    {
        int rowNew = row + pathRow[i];
        int colNew = col + pathCol[i];
        if (issafe(rowNew, colNew, visited))
        {
            visited[rowNew][colNew] = 1;
            add(word,board[rowNew][colNew]);
            FindWord(board, visited, rowNew, colNew, word, dict);
            remove1(word);
            visited[rowNew][colNew] = 0;
        }
    }
}
int main(){
    int row=3,col=3;
    for (int i = 0; i < row; i++){
        for (int j = 0; j < col; j++){
            add(word,board[i][j]);
            visited[i][j]=1;
            FindWord(board,visited,i,j,word,dict);
            remove1(word);
            visited[i][j]=0;
        }
    }
}
